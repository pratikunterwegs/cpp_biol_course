library(tufte)
library(tidyverse)
data_frame(x = rnorm(1e2, 0, 1), y = runif(10, 0, 1))
data_frame(x = rnorm(1e2, 0, 1), y = runif(100, 0, 1))
a = data_frame(x = rnorm(1e2, 0, 1), y = runif(100, 0, 1))
ggplot(a)+geom_point(aes(x = x, y = y))
ggplot(a)+geom_point(aes(x = x, y = y))+scale_x_log10()
a <- data_frame(x = rnorm(1e2, 0, 1), y = runif(100, 0, 1)) %>% map(function(x) case_when(x < 0 ~ 0, T ~ as.double(NA)))
View(a)
a <- data_frame(x = rnorm(1e2, 0, 1), y = runif(100, 0, 1)) %>% map(function(x) case_when(x < 0 ~ 0, T ~ x))
View(a)
a %>% unnest()
a %>% bind_cols()
a <- data_frame(x = rnorm(1e2, 0, 1), y = runif(100, 0, 1)) %>% map(function(x) case_when(x < 0 ~ 0, T ~ x)) %>% bind_cols()
head(a)
ggplot(a)+geom_point(aes(x = x,y=y))
ggplot(a)+geom_point(aes(x = x,y=y))+scale_x_log10()
ggplot(a)+geom_point(aes(x = x,y=y))+scale_x_log10(limits = c(0,2))
ggplot(a)+geom_point(aes(x = x,y=y))+scale_x_log10(limits = c(1e-4,2))
ggplot(a)+geom_point(aes(x = x,y=y))+scale_x_log10(limits = c(1e-4,2), expand=c(0,0))
ggplot(a)+geom_point(aes(x = x,y=y))+scale_x_log10(limits = c(1e-4,2), expand=c(0,1))
ggplot(a)+geom_point(aes(x = x,y=y))+scale_x_log10(limits = c(1e-4,2), expand=c(1,1))
ggplot(a)+geom_point(aes(x = x,y=y))+scale_x_log10(limits = c(1e-6,2))
ggplot(a)+geom_point(aes(x = x,y=y))+scale_x_log10(limits = c(1e-6,2))+coord_cartesian(clip = "off")
ggplot(a)+geom_point(aes(x = x,y=y), shape = 21, fill = "grey", size = 2)+scale_x_log10(limits = c(1e-6,2))+coord_cartesian(clip = "off")
ggplot(a)+geom_point(aes(x = x,y=y), shape = 21, fill = "grey", size = 2)+scale_x_log10(limits = c(1e-1,2))+coord_cartesian(clip = "off")
ggplot(a)+geom_point(aes(x = x,y=y), shape = 21, fill = "grey", size = 5)+scale_x_log10(limits = c(1e-1,2))+coord_cartesian(clip = "off")
ggplot(a)+geom_point(aes(x = x,y=y), shape = 21, fill = "grey", size = 5, stroke = 0.6)+scale_x_log10(limits = c(1e-1,2))+coord_cartesian(clip = "off")
ggplot(a)+geom_point(aes(x = x,y=y), shape = 21, fill = "grey", size = 5, stroke.wdith = 0.6)+scale_x_log10(limits = c(1e-1,2))+coord_cartesian(clip = "off")
df<-structure(list(dose = c(1.0000001, 1.04737100217022, 1.09698590648847,1.14895111335032, 1.20337795869652, 1.26038305255123, 1.32008852886009,1.38262230716338, 1.44811836666478, 1.51671703328309, 61.5098612858473,64.4236386159454, 67.4754441930906, 70.6718165392165, 74.0196039119089,77.525978976861, 81.1984541753771, 85.0448978198478, 89.073550951683,93.2930449978201, 97.7124202636365, 102.341145301888, 107.189137199173,112.266782823381, 117.584961077656, 123.155066208544, 128.98903221828,135.099358433491, 141.499136285126, 148.202077356965, 155.222542762819,162.575573915347, 6294.98902185499, 6593.18830115198, 6905.51354792318,7232.63392192496, 7575.25028161186, 7934.09668573241, 8309.9419660568,8703.59137460616, 9115.88830891252, 9547.71611900591, 10000),probability = c(0.000541224108467882, 0.000604351222894496,0.000674836364822755, 0.000753535950764922, 0.000841405774529429,0.000939512464066553, 0.00104904624066603, 0.00117133512397466,0.00130786074096225, 0.00146027591282991, 0.909137675722837,0.917853710549939, 0.925801889950727, 0.933037137930218,0.939612877653328, 0.945580543661554, 0.950989225589167,0.955885424480555, 0.960312903543462, 0.964312616478569,0.967922698169444, 0.971178504317829, 0.974112688435394,0.976755306362936, 0.979133940122965, 0.981273834388139,0.983198040151417, 0.984927561312444, 0.986481500855764,0.987877204102597, 0.989130397184622, 0.990255319432183,0.99999839386077, 0.999998561719608, 0.999998712035413, 0.999998846641614,0.999998967180029, 0.999999075120889, 0.99999917178077, 0.999999258338655,0.999999335850309, 0.999999405261159, 0.999999467417826),Lower = c(-0.000843143037924429, -0.000920390477371509, -0.00100418185380549,-0.0010949913193486, -0.001193314249806, -0.0012996656659587,-0.00141457798197374, -0.00153859794267898, -0.00167228258800459,-0.00181619405586472, 0.844594565230258, 0.856774199246587,0.868144364095382, 0.878738700796645, 0.888592208066634,0.897740830817022, 0.906221056637379, 0.914069534310229,0.92132272464159, 0.928016590318475, 0.934186328384788, 0.939866146372578,0.94508908115546, 0.949886858166262, 0.954289787671259, 0.958326694236121,0.962024875270718, 0.965410084524652, 0.968506536556353,0.971336928460753, 0.973922475470259, 0.976282957407176,0.999991663016519, 0.999992483777835, 0.999993224038698,0.999993891661212, 0.99999449374333, 0.999995036692715, 0.999995526293503,0.999995967766653, 0.999996365824493, 0.999996724720012,0.999997048291405), Upper = c(0.00192559125486019, 0.0021290929231605,0.002353854583451, 0.00260206322087845, 0.00287612579886485,0.0031786905940918, 0.00351267046330581, 0.0038812681906283,0.00428800406992909, 0.00473674588152455, 0.973680786215416,0.978933221853291, 0.983459415806071, 0.987335575063791,0.990633547240022, 0.993420256506086, 0.995757394540955,0.997701314650881, 0.999303082445333, 1.00060864263866, 1.0016590679541,1.00249086226308, 1.00313629571533, 1.00362375455961, 1.00397809257467,1.00422097454016, 1.00437120503212, 1.00444503810023, 1.00445646515518,1.00441747974444, 1.00433831889898, 1.00422768145719, 1.00000512470502,1.00000463966138, 1.00000420003213, 1.00000380162202, 1.00000344061673,1.00000311354906, 1.00000281726804, 1.00000254891066, 1.00000230587612,1.00000208580231, 1.00000188654425), model = c("mod3", "mod3","mod3", "mod3", "mod3", "mod3", "mod3", "mod3", "mod3", "mod3","mod3", "mod3", "mod3", "mod3", "mod3", "mod3", "mod3", "mod3","mod3", "mod3", "mod3", "mod3", "mod3", "mod3", "mod3", "mod3","mod3", "mod3", "mod3", "mod3", "mod3", "mod3", "mod3", "mod3","mod3", "mod3", "mod3", "mod3", "mod3", "mod3", "mod3", "mod3","mod3")), .Names = c("dose", "probability", "Lower", "Upper","model"), row.names = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L,90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L, 101L,102L, 103L, 104L, 105L, 106L, 107L, 108L, 109L, 110L, 111L, 190L,191L, 192L, 193L, 194L, 195L, 196L, 197L, 198L, 199L, 200L), class = "data.frame")
library(ggplot2)
library(scales)
ggplot(df, aes(x=dose,y=probability, group=model))+
geom_ribbon(aes(ymin=Lower,ymax=Upper,x=dose,
fill=model, col=model,alpha=2))+
#Axis log transformation:
annotation_logticks(scaled = TRUE,sides="b") +
scale_x_log10(breaks = 10^(-1:10),
labels = trans_format("log10", math_format(10^.x)))+
#Axes labels:
labs(x="dosage (log scale)", y="response",size=1)
install.packages(c("aqp", "bayesplot", "callr", "car", "coda", "conflicted", "dendextend", "devtools", "digest", "dplyr", "evaluate", "fansi", "ggeffects", "ggpubr", "ggridges", "ggspatial", "ggthemes", "git2r", "httpuv", "languageserver", "leaflet", "magick", "MASS", "mime", "move", "moveVis", "nloptr", "NLP", "oce", "openssl", "plotly", "plotrix", "pracma", "pROC", "processx", "ps", "R.matlab", "R6", "raster", "RcppArmadillo", "reprex", "rgdal", "rgeos", "rstudioapi", "sandwich", "scales", "sf", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "snakecase", "spacetime", "spatstat", "spatstat.data", "spdep", "survey", "testthat", "TH.data", "tidyselect", "tm", "TTR", "units", "webshot", "xts"))
install.packages(c("git2r", "openssl"))
install.packages(c("magick", "openssl"))
install.packages("magick")
install.packages(c("rgeos", "units"))
library(tidyverse);library(sf)
borders <- st_read("ne_10m_admin_0_boundary_lines_land.shp")
plot(borders)
plot(borders, max.plot = 1)
borders <- st_transform(borders, 32632)
plot(borders, max.plot = 1)
buffer <- st_buffer(borders, 100*1e3)
plot(buffer, max.plot = 1)
#'load borders shapefile
border_buffer <- st_read("ne_10m_admin_0_boundary_lines_land.shp") %>%
st_transform(32632) %>%
st_buffer(100*1e3) %>%
st_transform(4326)
plot(border_buffer, plot.max=1)
plot(border_buffer, max.plot =1)
#'pick out a particular border by country name
roi <- border_buffer %>%
filter(name == "Kazakhstan")
plot(roi, max.plot =1)
#'pick out a particular border by country name
roi <- border_buffer %>%
filter(adm0_left == "Kazakhstan")
plot(roi, max.plot =1)
#'pick out a particular border by country name
roi <- border_buffer %>%
filter(adm0_right == "Kazakhstan")
plot(roi, max.plot =1)
library(tmap)
install.packages("tmap")
#'export border_buffer
st_write(roi, dsn = "roi", layer = "border_buffer_kazakhstan", driver = "ESRI Shapefile")
install.packages("stars")
install.packages("stars")
install.packages("ncdf4")
install.packages("stars")
install.packages("mapview")
install.packages("tmap")
#'plot on an interactive map
library(tmap)
tm_shape(border_buffer)+
tm_polygons(border.col = NULL,
col = "adm0_right")
#'load borders shapefile
border_buffer <- st_read("ne_10m_admin_0_boundary_lines_land.shp") %>% st_transform(32632) %>% st_buffer(100*1e3, joinStyle = "mitre") %>% st_transform(4326)
#'load borders shapefile
border_buffer <- st_read("ne_10m_admin_0_boundary_lines_land.shp") %>% st_transform(32632) %>% st_buffer(100*1e3, joinStyle = "MITRE") %>% st_transform(4326)
#'pick out a particular border by country name
roi <- border_buffer %>% filter(adm0_right == "Kazakhstan")
plot(roi, max.plot = 1)
plot(st_union(roi), max.plot = 1)
a <- st_union(roi)
?st_union
plot(st_combine(roi), max.plot = 1)
?st_union
diffPoly <- st_difference(roi), st_union(roi))
diffPoly <- st_difference((roi), st_union(roi))
plot(diffPoly)
roi_map <- tm_shape(border_buffer)+
tm_polygons(border.col = NULL,
col = "adm0_right")
roi_map_interactive <- tmap_leaflet(roi_map)
roi_map_interactive
#'export leaflet widget
library(htmlwidgets)
#'make map
roi_map <- tm_shape(roi)+
tm_polygons(border.col = NULL,
col = "adm0_right")
#'make leaflet widget
roi_map_interactive <- tmap_leaflet(roi_map)
roi_map_interactive
#'pick out a particular border by country name
roi <- border_buffer %>% filter(adm0_right == "Kazakhstan") %>%
mutate(adm0_right = droplevels(adm0_right))
#'make map
roi_map <- tm_shape(roi)+
tm_polygons(border.col = NULL,
col = "adm0_right")
#'make leaflet widget
roi_map_interactive <- tmap_leaflet(roi_map)
roi_map_interactive
saveWidget(roi_map_interactive, file = "roi_map.html")
#'make map
roi_map <- tm_shape(roi)+
tm_polygons(border.col = NULL,
col = "adm0_right", alpha = 0.2)
#'make leaflet widget
roi_map_interactive <- tmap_leaflet(roi_map)
saveWidget(roi_map_interactive, file = "roi_map.html")
#'pick out a particular border by country name
roi <- border_buffer %>% filter(adm0_right == "Kazakhstan" | adm0_left == "Kazakhstan") %>%
mutate(adm0_right = droplevels(adm0_right))
#'make map
roi_map <- tm_shape(roi)+
tm_polygons(border.col = NULL,
col = "adm0_right", alpha = 0.2)
#'make leaflet widget
roi_map_interactive <- tmap_leaflet(roi_map)
saveWidget(roi_map_interactive, file = "roi_map.html")
library(dplyr)
library(sf)
a= st_point(c(1e2,1e2))
b=st_buffer(a, 2e2)
class(b)
st_distance(a, b)
c=st_point(c(3e3,3e3))
st_distance(b,c)
b=st_cast(b, "MULTIPOINT")
st_distance(b,c)
d = b %>% st_coordinates() %>% as.data.frame() %>% st_as_sf(coords = c("X","Y"))
class(d)
st_sf(b)
st_sf(a)
?st_sf
st_distance(d, a)
st_distance(d, c)
library(readr)
library(dplyr)
library(ggplot2)
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv")
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
a = as.matrix(a)
a = raster::raster(a)
a
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
a = a %>% mutate(col = 1:nrow(a))
head(a)
colnames(a)
library(tidyr)
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
a = a %>% mutate(row = 1:nrow(a))
library(tidyr)
b = gather(a, col, value, -row)
b = gather(a, col, value, -row) %>%
mutate(col = as.numeric(col))
ggplot()+
geom_tile(aes(x = col, y = row, fill = value))
b = gather(a, col, value, -row) %>%
mutate(col = as.numeric(col), value = as.numeric(value))
b = gather(a, col, value, -row)# %>%
b = gather(a, col, value, -row) %>%
mutate(col = as.numeric(as.factor(col)), value = as.numeric(value))
ggplot()+
geom_tile(aes(x = col, y = row, fill = value))
ggplot()+
geom_tile(data = b,aes(x = col, y = row, fill = value))
ggplot()+
geom_tile(data = b,aes(x = row, y = col, fill = value))
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = c(as.character(1:250)))
colnames(a) = as.character(1:250)
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
colnames(a) = as.character(1:250)
b = gather(a, col, value, -row) %>%
mutate(col = as.numeric(as.factor(col)), value = as.numeric(value))
colnames(a) = as.factor(as.character(1:250))
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
colnames(a) = as.character(1:250)
a = a %>% mutate(row = 1:nrow(a))
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
colnames(a) = as.character(1:251)
a = a %>% mutate(row = 1:nrow(a))
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
last(colnames(a))
colnames(a) = as.character(1:251)
a = a %>% mutate(row = 1:nrow(a))
b = gather(a, col, value, -row) %>%
mutate(col = as.numeric(as.factor(col)), value = as.numeric(value))
ggplot()+
geom_tile(data = b,aes(x = row, y = row, fill = value))
ggplot()+
geom_tile(data = b,aes(x = row, y = col, fill = value))
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
colnames(a) = as.character(1:250)
a = a %>% mutate(row = 1:nrow(a))
View
View(a)
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
library(readr);library(tidyr);library(dplyr)
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
colnames(a) = as.character(1:250)
b = gather(a, col, value, -row) %>%
mutate(col = as.numeric(as.factor(col)), value = as.numeric(value))
library(tidyr)
b = gather(a, col, value, -row) %>%
mutate(col = as.numeric(as.factor(col)), value = as.numeric(value))
last(colnames(a))
a = a %>% mutate(row = 1:nrow(a))
#library(tidyr)
b = gather(a, col, value, -row) %>%
mutate(col = as.numeric(col), value = as.numeric(value))
ggplot()+
geom_tile(data = b,aes(x = row, y = col, fill = value))
ggplot()+
geom_tile(data = b,aes(x = row, y = col, fill = value))
library(ggplot2)
ggplot()+
geom_tile(data = b,aes(x = row, y = col, fill = value))
ggplot()+
geom_tile(data = b,aes(x = row, y = col, fill = value))+
theme(legend.position = "none")
ggplot()+
geom_tile(data = b,aes(x = col, y = row, fill = value))+
theme(legend.position = "none")
ggplot()+
geom_tile(data = b,aes(x = col, y = row, fill = value))+
scale_y_reverse()+
theme(legend.position = "none")
library(readr);library(tidyr);library(dplyr)
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
colnames(a) = as.character(1:250)
a = a %>% mutate(row = 1:nrow(a))
#library(tidyr)
b = gather(a, col, value, -row) %>%
mutate(col = as.numeric(col), value = as.numeric(value))
library(ggplot2)
ggplot()+
geom_tile(data = b,aes(x = col, y = row, fill = value))+
scale_y_reverse()+
theme(legend.position = "none")
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
colnames(a) = as.character(1:250)
a = a %>% mutate(row = 1:nrow(a))
#library(tidyr)
b = gather(a, col, value, -row) %>%
mutate(col = as.numeric(col), value = as.numeric(value))
ggplot()+
geom_tile(data = b,aes(x = col, y = row, fill = value))+
scale_y_reverse()+
theme(legend.position = "none")
a = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
colnames(a) = as.character(1:250)
a = a %>% mutate(row = 1:nrow(a))
#library(tidyr)
b = gather(a, col, value, -row) %>%
mutate(col = as.numeric(col), value = as.numeric(value))
ggplot()+
geom_tile(data = b,aes(x = col, y = row, fill = value))+
scale_y_reverse()+
theme(legend.position = "none")
source('~/git/cpp_biol_course/p01_pratik.r')
data_pattern_30 = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
colnames(data_pattern_30) = as.character(1:250)
data_pattern_30 = data_pattern_30 %>% mutate(row = 1:nrow(data_pattern_30))
#library(tidyr)
data_pattern_30 = gather(data_pattern_30, col, value, -row) %>%
mutate(col = as.numeric(col), value = as.numeric(value))
ggplot()+
geom_tile(data = data_pattern_30,aes(x = col, y = row, fill = value))+
scale_y_reverse()+
theme(legend.position = "none")
ggplot()+
geom_tile(data = data_pattern_30,aes(x = col, y = row, fill = value))+
scale_y_reverse()+
theme_void()+
labs(list(title = "data pattern rule 30 pratik"))
ggplot()+
geom_tile(data = data_pattern_30,aes(x = col, y = row, fill = value))+
scale_y_reverse()+
theme_void()+
theme(legend.position = "none")+
labs(list(title = "data pattern rule 30 pratik"))
ggsave(filename = "p01_pratik_plot_rule30.png", plot = last_plot(), device = png())
#### rule 110 ####
data_pattern_110 = read_csv("~/git/cpp_biol_course/p01_pratik_data110.csv", col_names = F)
data_pattern_110 = read_csv("~/git/cpp_biol_course/p01_pratik_data_rule110.csv", col_names = F)
colnames(data_pattern_30) = as.character(1:250)
data_pattern_110 = data_pattern_110 %>% mutate(row = 1:nrow(data_pattern_30))
#library(tidyr)
data_pattern_110 = gather(data_pattern_110, col, value, -row) %>%
mutate(col = as.numeric(col), value = as.numeric(value))
library(ggplot2)
ggplot()+
geom_tile(data = data_pattern_110,aes(x = col, y = row, fill = value))+
scale_y_reverse()+
theme_void()+
theme(legend.position = "none")+
labs(list(title = "data pattern rule 110 pratik"))
#### rule 110 ####
data_pattern_110 = read_csv("~/git/cpp_biol_course/p01_pratik_data_rule110.csv", col_names = F)
data_pattern_30 = read_csv("~/git/cpp_biol_course/p01_pratik_data_rule30.csv", col_names = F)
data_pattern = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
colnames(data_pattern) = as.character(1:250)
data_pattern = data_pattern %>% mutate(row = 1:nrow(data_pattern_30))
#library(tidyr)
data_pattern = gather(data_pattern, col, value, -row) %>%
mutate(col = as.numeric(col), value = as.numeric(value))
ggplot()+
geom_tile(data = data_pattern ,aes(x = col, y = row, fill = value))+
scale_y_reverse()+
theme_void()+
theme(legend.position = "none")+
labs(list(title = "cellular automaton pattern"))
#library(tidyr)
data_pattern = gather(data_pattern, col, value, -row) %>%
mutate(col = as.numeric(col), value = as.numeric(value))
data_pattern = data_pattern %>% mutate(row = 1:nrow(data_pattern))
#library(tidyr)
data_pattern = gather(data_pattern, col, value, -row) %>%
mutate(col = as.numeric(col), value = as.numeric(value))
ggplot()+
geom_tile(data = data_pattern ,aes(x = col, y = row, fill = value))+
scale_y_reverse()+
theme_void()+
theme(legend.position = "none")+
labs(list(title = "cellular automaton pattern"))
ggsave(filename = "p01_pratik_plot.png", plot = last_plot(), device = png())
#'read data
data_pattern = read_csv("~/git/cpp_biol_course/p01_pratik_data.csv", col_names = F)
#'assign colnames
colnames(data_pattern) = as.character(1:ncol(data_pattern))
#'
data_pattern = data_pattern %>% mutate(row = 1:nrow(data_pattern))
source('~/git/cpp_biol_course/p01_pratik.r')
#'verify working directory and load libs
getwd()
setwd("~/git/cpp_biol_course/")
library(tidyverse)
#'read in data and summarise mean elongation rate
data = read_csv("data_p03_pratik.csv") %>% group_by((force)) %>% summarise(mean_rate = mean((length_final - length_start)/time_steps), sd = sd((length_final - length_start)/time_steps), n = length(length_final))
head
head(data)
force_stall = 13*(1.385e-23)*298*log(200/50)/(8e-9)
ggplot(data, aes(x = as.numeric(force), y = mean_rate)) + geom_line()
ggplot(data, aes(x = force, y = mean_rate)) + geom_line()
#'read in data and summarise mean elongation rate
data = read_csv("data_p03_pratik.csv") %>% group_by(barrier_force = force) %>% summarise(mean_rate = mean((length_final - length_start)/time_steps), sd = sd((length_final - length_start)/time_steps), n = length(length_final))
head(data)
dim(data)
ggplot(data, aes(x = barrier_force, y = mean_rate)) + geom_line()
#'read in data and summarise mean elongation rate
data = read_csv("data_p03_pratik.csv") %>% group_by(barrier_force = force) #%>% summarise(mean_rate = mean((length_final - length_start)/time_steps), sd = sd((length_final - length_start)/time_steps), n = length(length_final))
head(data)
View(data)
#'read in data and summarise mean elongation rate
data = read_csv("data_p03_pratik.csv") %>% group_by(barrier_force = force) %>% summarise(mean_rate = mean((length_final - length_start)/time_steps), sd = sd((length_final - length_start)/time_steps), n = length(length_final))
View(data)
data %>% select(barrier_force == 2e-12)
data %>% select(force == 2e-12)
#'read in data and summarise mean elongation rate
data = read_csv("data_p03_pratik.csv") %>% group_by(barrier_force = force)# %>% summarise(mean_rate = mean((length_final - length_start)/time_steps), sd = sd((length_final - length_start)/time_steps), n = length(length_final))
View(data)
37e-9
data %>% filter(force %between% c(2.0e-12, 2.9e-12))
library(tidyverse)
data %>% filter(force %between% c(2.0e-12, 2.9e-12))
